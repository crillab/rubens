package fr.cril.rubens.core;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.function.Consumer;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import fr.cril.rubens.specs.Instance;
import fr.cril.rubens.specs.InstanceTranslator;
import fr.cril.rubens.specs.TestGeneratorFactory;

/**
 * Launches a test generation process according to a provided {@link TestGeneratorFactory} instance.
 * 
 * The test generation process uses a breadth-first search algorithm:
 * the first instance under consideration is the root one, followed by the instances obtained by applying each translator to the root instance,
 * followed by the ones generated by applying each generator to last generated ones, and so on.
 * This process is applied until the provided depth bound is reached.
 * 
 * This class allows to get the whole set of computing instances, or to apply a function to each new instance, which is freed then.
 * 
 * @author Emmanuel Lonca - lonca@cril.fr
 *
 * @param <T> the type of instances under consideration
 */
public class TestGenerator<T extends Instance> {
	
	private final TestGeneratorFactory<T> factory;
	
	private static final Logger LOGGER = LoggerFactory.getLogger(TestGenerator.class);

	/**
	 * Builds a test generator given a factory.
	 * 
	 * @param factory the factory
	 */
	public TestGenerator(final TestGeneratorFactory<T> factory) {
		this.factory = factory;
	}
	
	/**
	 * Generate the instances for a search tree which depth is bounded by the provided parameter.
	 * The set of generated instances is retained and fully returned as the result of the function.
	 * 
	 * This method would use an exponential space for an unbounded depth.
	 * 
	 * @param depth the tree depth
	 * @return the generated instances.
	 */
	public List<T> computeToDepth(final int depth) {
		final Set<T> instances = new HashSet<>();
		computeToDepth(depth, instances::add);
		return new ArrayList<>(instances);
	}
	
	/**
	 * Generate the instances for a search tree which depth is bounded by the provided parameter.
	 * For each generated instance, the provided consumer is applied and the instance is then freed.
	 * 
	 * The depth must be at least one (i.e., the root depth).
	 * In case the provided depth does not fit this requirement, an {@link IllegalArgumentException} is thrown.
	 * 
	 * This method would use an exponential space for an unbounded depth.
	 * 
	 * @param depth the tree depth
	 * @param consumer the consumer
	 * @throws IllegalArgumentException if the provided depth is less than one
	 */
	public void computeToDepth(final int depth, final Consumer<T> consumer) {
		Map<Integer, Set<T>> instances = new TreeMap<>();
		if(depth < 1) {
			final IllegalArgumentException exception = new IllegalArgumentException("depth must be at least one");
			LOGGER.error(exception.getMessage(), exception);
			throw exception;
		}
		instances.computeIfAbsent(1, k -> new HashSet<>()).add(this.factory.initInstance());
		consumer.accept(this.factory.initInstance());
		for(int i=2; i<=depth; ++i) {
			computeForDepth(i, instances);
			final Set<T> newInstances = instances.get(i);
			if(newInstances.isEmpty()) {
				break;
			}
			newInstances.forEach(consumer::accept);
			instances.remove(i-1);
		}
	}

	private void computeForDepth(final int depth, final Map<Integer, Set<T>> instances) {
		instances.get(depth-1).forEach(i -> computeFromPreceedingInstance(i, instances.computeIfAbsent(depth, k -> new HashSet<>())));
	}

	private void computeFromPreceedingInstance(final T from, final Set<T> to) {
		for(final InstanceTranslator<T> translator : this.factory.translators()) {
			if(translator.canBeAppliedTo(from)) {
				to.add(translator.translate(from));
			}
		}
	}

}
